version: '3.8'

services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: ecommerce-rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - ecommerce-network
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ecommerce-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: ecommerce-events
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: ecommerce-order-service
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      LOG_LEVEL: info
      
      # RabbitMQ Configuration
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      
      # MongoDB Configuration
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/ecommerce-events?authSource=admin
      
      # Redis Configuration
      REDIS_URL: redis://:redis123@redis:6379
      
      # Service Configuration
      SERVICE_NAME: order-service
      MAX_RETRIES: 3
      RETRY_DELAY: 1000
      IDEMPOTENCY_TTL: 86400
      CIRCUIT_BREAKER_TIMEOUT: 30000
      CIRCUIT_BREAKER_ERROR_THRESHOLD: 50
      CIRCUIT_BREAKER_RESET_TIMEOUT: 60000
      
    volumes:
      - ./order-service/logs:/app/logs
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Inventory Service
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: ecommerce-inventory-service
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      LOG_LEVEL: info
      
      # RabbitMQ Configuration
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      
      # MongoDB Configuration
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/ecommerce-events?authSource=admin
      
      # Redis Configuration
      REDIS_URL: redis://:redis123@redis:6379
      
      # Service Configuration
      SERVICE_NAME: inventory-service
      MAX_RETRIES: 3
      RETRY_DELAY: 1000
      IDEMPOTENCY_TTL: 86400
      CIRCUIT_BREAKER_TIMEOUT: 30000
      CIRCUIT_BREAKER_ERROR_THRESHOLD: 50
      CIRCUIT_BREAKER_RESET_TIMEOUT: 60000
      
    volumes:
      - ./inventory-service/logs:/app/logs
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: ecommerce-notification-service
    ports:
      - "3003:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      LOG_LEVEL: info
      
      # RabbitMQ Configuration
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      
      # MongoDB Configuration
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/ecommerce-events?authSource=admin
      
      # Redis Configuration
      REDIS_URL: redis://:redis123@redis:6379
      
      # Service Configuration
      SERVICE_NAME: notification-service
      MAX_RETRIES: 3
      RETRY_DELAY: 1000
      IDEMPOTENCY_TTL: 86400
      CIRCUIT_BREAKER_TIMEOUT: 30000
      CIRCUIT_BREAKER_ERROR_THRESHOLD: 50
      CIRCUIT_BREAKER_RESET_TIMEOUT: 60000
      
      # Email Configuration (example)
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
      
    volumes:
      - ./notification-service/logs:/app/logs
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - order-service
      - inventory-service
      - notification-service
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ecommerce-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  rabbitmq_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16